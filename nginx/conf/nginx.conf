
#user  nobody;
worker_processes  2;

error_log   logs/debug.log debug;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
	lua_package_path 'D:\software\openresty-1.13.6.2-win64\nginx/lua/?.lua;;';
	lua_code_cache on;
	
    include       mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    gzip  on;
	server_tokens   off;   #隐藏nginx版本号
	
	#设定负载均衡的服务器列表
    upstream mysvr1 {
        #weigth参数表示权值
        server 192.168.8.1:8080 max_fails=2 fail_timeout=5s weight=2;
        server 192.168.8.2:8081 max_fails=2 fail_timeout=5s weight=1;
        server 192.168.8.3:8082 max_fails=2 fail_timeout=5s weight=4;
    }
	
	upstream mysvr2 {    
		server 192.168.9.1:8080 down;   
		server 192.168.9.2:8080 weight=2;   
		server 192.168.9.3:8080;   
		server 192.168.9.4:8080 backup;   
	}  
	
	upstream mysvr3 {
		server 192.168.10.1:8080;
		server 192.168.10.2:8080;
		balancer_by_lua_file lua/balancer.lua;
	}
	
	lua_shared_dict healthcheck 1m;
    lua_socket_log_errors off;
    init_worker_by_lua_block {
        local hc = require "resty.upstream.healthcheck"
        local ok, err = hc.spawn_checker {
            shm = "healthcheck",
            upstream = "mysvr3",
            type = "http",
            http_req = "GET / HTTP/1.0\r\nHost: mysvr3\r\n\r\n",
            interval = 2000,
            timeout = 5000,
            fall = 3,
            rise = 2,
            valid_statuses = {200, 302},
            concurrency = 10,
        }
 
        if not ok then
            ngx.log(ngx.ERR, "=======> failed to spawn health checker: ", err)
            return
        end
    }

	## 这里取得原始用户的IP地址
	map $http_x_forwarded_for  $clientRealIp {
		""	$remote_addr;
		~^(?P<firstAddr>[0-9\.]+),?.*$	$firstAddr;
	}
	limit_req_zone $clientRealIp zone=mylimit:10m rate=10r/s;	#对同一IP访问进行限流
	lua_shared_dict my_limit_conn_store 100M;
	lua_shared_dict my_limit_req_store 100M;

    server {
        listen       80;
        server_name  localhost;
        charset utf-8;

        #access_log  logs/host.access.log  main;

	    location / {
            root   ../html;   #网站根目录，根据需要修改
            index  index.html index.htm;
        }
		
		#静态文件
        location ~ ^/(images|javascript|js|css|flash|media|static)/ {
            root /var/www/;
            expires 10d;
        }
		
		location /test/balance {
			proxy_pass http://mysvr3;
		}
	
		location /server/status {
            access_log off;
            default_type text/plain;
            content_by_lua_block {
                local hc = require "resty.upstream.healthcheck"
                ngx.say("Nginx Worker PID: ", ngx.worker.pid())
                ngx.print(hc.status_page())
            }
        }
		
		location /test/limit1 {
            limit_req zone=mylimit burst=5 nodelay;
			default_type text/plain;
            content_by_lua_block {
                ngx.print('nginx limit ' .. $clientRealIp)
            }
			#echo $clientRealIp;
        }
		
		location /test/limit2 {
			access_by_lua_file lua/limit_conn.lua;
			default_type text/plain;
            content_by_lua_block {
                ngx.print('goodluck')
				ngx.sleep(0.01)
            }
			log_by_lua_file src/log.lua;
		}

		location /test/limit3 {
			access_by_lua_file lua/limit_req.lua;
			default_type text/plain;
            content_by_lua_block {
                ngx.print('goodluck')
				ngx.sleep(0.01)
            }
		}
		

    }

}

